'''Обратиться к нужному символу строки'''
# Str="superman"
# print(Str[0])
# print(Str[1])
# print(len(Str)-1)

'''Доступ по отрицательному индексу'''
# Str="superman"
# print(Str[-1])
# print(Str[-2])

'''Конкатенация строк'''
# str1 = "I'm "
# str2 = "superman"
# print(str1 + str2)
# str3 = str1 + str2
# print(str3)

'''Дублирование строки (оператор «умножения» строк)'''
# Str="I'm superman "
# print(Str*5)
# BigStr=Str*5
# print(BigStr)

'''Определение длины строки'''
# Str="I'm superman"
# print(len(Str))

'''Переводит первый символ строки str в верхний регистр, остальные — в нижний'''
# Str="работа не волк. Никто не волк. Только волк — волк."
# print(Str.capitalize())

'''Переводит все буквенные символы оригинальной строки в нижний регистр'''
# Str="Если Закрыть Глаза, Становится Темно."
# print(Str.lower())

'''Преобразует все буквенные символы строки в верхний регистр'''
# Str="Делай как надо, как не надо не делай."
# print(Str.upper())

'''Преобразует первые буквы каждого слова в строке в верхний регистр'''
# Str="Одна ошибка — и ты ошибся!"
# print(Str.title())

'''Преобразует буквенные символы строки, меняя их регистр на противоположный'''
# Str="шаг Влево, Шаг вправо — Два шага"
# print(Str.swapcase())

''' Определяет количество вхождений фрагмента pattern в строку'''
# Str="Человек меняется по двум причинам: или по первой, или по второй"
# print(Str.count('Человек'))

'''Используется для поиска в строке нужного фрагмента, возвращает индекс начала первого вхождения фрагмента в строку'''
# Str="Многие жалуются на свою внешность, но на мозги не жалуется никто"
# print(Str.find('жалуются'))

'''Работа метода аналогична методу .find(), отличие — в вызове исключения ValueError в случае, когда фрагмент не найден'''
# Str="Многие жалуются на свою внешность, но на мозги не жалуется никто"
# print(Str.index('жалуются'))

'''Используется для поиска в строке нужного фрагмента, начиная с конца строки, 
возвращает — индекс начала последнего вхождения фрагмента  в строку  или -1 в случае, 
если фрагмент не входит в состав строки'''
# Str="Мама учила не ругаться матом, но жизнь научила не ругаться матом при маме"
# print(Str.rfind('жизнь'))

'''Работа метода аналогична методу .rfind(), отличие — в вызове исключения ValueError в случае, когда фрагмент
не найден (не входит в состав строки).'''
# Str="Мама учила не ругаться матом, но жизнь научила не ругаться матом при маме"
# print(Str.rindex('жизнь'))

'''Определяет, заканчивается ли строка указанным фрагментом.'''
# Str="Тут — это вам не там"
# print(Str.endswith('там'))
# print(Str.endswith('Тут'))

'''Определяет, начинается ли строка с указанного фрагмента'''
# Str="Тут — это вам не там"
# print(Str.startswith('там'))
# print(Str.startswith('Тут'))

'''Проверяет, состоит ли строка только из буквенных и цифровых символов'''
# Str="100лет"
# print(Str.isalnum())

'''Проверяет, состоит ли строка только из буквенных символов'''
# Str="100лет"
# print(Str.isalpha())

'''Проверяет, состоит ли строка только из цифровых символов (используется для проверки, является ли строка числом)'''
# Str="100лет"
# Str2="100"
# print(Str.isdigit())
# print(Str2.isdigit())

'''Проверяет, находятся ли все буквенные символы строки в нижнем регистре (символы строки, 
которые не являются буквой алфавита — игнорируются данной проверкой)'''
# Str="Молчание — лучший способ ответа на бессмысленные вопросы."
# print(Str.islower())
# Str2="молчание — лучший способ ответа на бессмысленные вопросы."
# print(Str2.islower())

'''Проверяет, что в состав строки входят только пробельные символы, к которым относятся символы пробела, табуляции и перехода на новую строку'''
# Str="Молчание — лучший способ ответа на бессмысленные вопросы."
# print(Str.isspace())
# Str2="\t    "
# print(Str2.isspace())

'''Проверяет, начинается ли каждое слово строки с символа в верхнем регистре'''
# Str="Улыбайтесь! Ведь улыбка — это бесплатная терапия"
# print(Str.istitle())
# Str2="Улыбайтесь! Ведь Улыбка — Это Бесплатная Терапия"
# print(Str2.istitle())

'''Определяет, находятся ли все буквенные символы строки в верхнем регистре.'''
# Str="НЕ КРИЧИ НА МЕНЯ"
# print(Str.isupper())

'''Определяет, находятся ли все буквенные символы строки в нижнем регистре'''
# Str="не кричи на меня"
# print(Str.islower())

'''Дополняет (расширяет) строку до указанной длины width, возвращаемый результат — расширенная копия строки'''
# Str="Я люблю дедлайны. Мне нравится свистящий звук, который они издают, когда пролетают мимо"
# print(Str.center(100))

'''Возвращает копию строки, в которой каждый символ табуляции ('\t') заменен на пробел, количество которых задается через 
параметр tabsize'''
# Str="Я люблю дедлайны. \n\tМне нравится свистящий звук, который они издают, когда пролетают мимо"
# print(Str.expandtabs(tabsize=7))

'''Возвращает выровненную по левому краю копию строки указанной ширины width.'''
# Str="Нам надо проводить больше встреч, пока не выясним, почему работа не выполняется"
# print(Str.ljust(100,'!'))

'''Выравнивания строки по правому краю в поле указанной ширины'''
# Str="Нам надо проводить больше встреч, пока не выясним, почему работа не выполняется"
# print(Str.rjust(100,'!'))

'''Возвращает копию строки, удаляя начальные символы (слева), указанные в качестве аргумента character'''
# Str="***Кто рано встает, тому можно еще поспать. Рано же встал."
# print(Str.lstrip('*'))

'''Для удаления завершающих символов (или пробелов) в строке справа'''
# Str="Кто рано встает, тому можно еще поспать. Рано же встал....."
# print(Str.rstrip('.'))

'''Для удалиения пробела (или указанные символы) и с левой, и с правой стороны строки'''
# Str="....Он силён, как бык. И почти так же умён...."
# print(Str.strip('.'))

'''Дополняет строку слева символами «0» ширины.'''
Str="123"
print(Str.zfill(9))